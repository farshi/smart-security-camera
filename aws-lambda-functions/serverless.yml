
service: raspberry-pi-camera

provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-2

  iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "s3:Get*"
       - "s3:List*"
       - "s3:PutBucketNotification"
       - "s3:PutObject"
       - "s3:DeleteObject"
       - "lambda:InvokeFunction"
       - "ses:*"
       - "logs:CreateLogGroup"
       - "logs:CreateLogStream"
       - "logs:PutLogEvents"
       - "rekognition:CompareFaces"
       - "rekognition:DetectFaces"
       - "rekognition:DetectLabels"
       - "rekognition:ListCollections"
       - "rekognition:ListFaces"
       - "rekognition:SearchFaces"
       - "rekognition:SearchFacesByImage"
       - "states:StartExecution"
     Resource: { "Fn::Join" : ["", ["*"] ]  }

plugins:
  - serverless-external-s3-event

package:
  individually: true
  exclude:
    - .git
    - .git/**
    - .gitignore
    - .npmignore
    - .idea
    - readme.md
    - event.json
    - .serverless


# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  rekognition-image-assessment:
    handler: rekognition-image-assessment/rekognition-image-assessment.handler
    package:
      exclude:
      - evaluate-rekognition-labels/**
      - nodemailer-error-handler/**
      - nodemailer-send-notification/**
      - s3-archive-image/**
      - s3-trigger-image-processing/**
  evaluate-rekognition-labels:
    handler: evaluate-rekognition-labels/evaluate-rekognition-labels.handler
    package:
      exclude:
        - rekognition-image-assessment/**
        - nodemailer-error-handler/**
        - nodemailer-send-notification/**
        - s3-archive-image/**
        - s3-trigger-image-processing/**
  nodemailer-send-notification:
    handler: nodemailer-send-notification/nodemailer-send-notification.handler
    package:
      exclude:
        - rekognition-image-assessment/**
        - evaluate-rekognition-labels/**
        - nodemailer-error-handler/**
        - s3-archive-image/**
        - s3-trigger-image-processing/**
    memorySize: 256
  s3-archive-image:
    handler: s3-archive-image/s3-archive-image.handler
    package:
      exclude:
        - rekognition-image-assessment/**
        - evaluate-rekognition-labels/**
        - nodemailer-error-handler/**
        - nodemailer-send-notification/**
        - s3-trigger-image-processing/**
  nodemailer-error-handler:
    handler: nodemailer-error-handler/nodemailer-error-handler.handler
    package:
      exclude:
        - rekognition-image-assessment/**
        - evaluate-rekognition-labels/**
        - nodemailer-send-notification/**
        - s3-archive-image/**
        - s3-trigger-image-processing/**


  s3-trigger-image-processing:
    handler: s3-trigger-image-processing/s3-trigger-image-processing.handler
    package:
      exclude:
        - rekognition-image-assessment/**
        - evaluate-rekognition-labels/**
        - nodemailer-send-notification/**
        - s3-archive-image/**
        - nodemailer-error-handler/**
    events:
      - s3:
          bucket: julianpitt-oregon
          events:
            - s3:ObjectCreated:*
          rules:
            - prefix: camera-upload/
            - suffix: .jpg

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
#    environment:
#      variable2: value2